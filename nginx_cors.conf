#
# Acts as a nginx HTTPS proxy server
# enabling CORS only to domains matched by regex 
#
server {
  listen 443 default_server http2 ssl;
  server_name awx.myawesomedomain.com;

  # Fake certs - fine for development purposes :-)
#  ssl_certificate /etc/ssl/certs/ssl-cert-snakeoil.pem;
#  ssl_certificate_key /etc/ssl/private/ssl-cert-snakeoil.key;

#  server {
#listen 443 ssl;
        ssl_certificate /etc/nginx/ssl/myawesomedomain_com.crt;
        ssl_certificate_key /etc/nginx/ssl/myawesomedomain_com.key;
        ssl_ca_certificate /etc/nginx/ssl/Cloudflare-ca.crt;
        ssl_certificate /etc/nginx/ssl/awx.myawesomedomain.com/fullchain.pem;
        ssl_certificate_key /etc/nginx/ssl/awx.myawesomedomain.com/privkey.pem;
        ssl_certificate /etc/nginx/ssl/awx.myawesomedomain.com_ecc/fullchain.pem;
        ssl_certificate_key /etc/nginx/ssl/awx.myawesomedomain.com_ecc/privkey.pem;
        ssl_dhparam /etc/nginx/ssl/dhparam.pem;
        ssl_protocols TLSv1.2;
        ssl_prefer_server_ciphers on;
        ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
        ssl_ecdh_curve secp384r1;
        ssl_session_cache shared:SSL:10m;
        ssl_session_tickets off;
        ssl_stapling on;
        ssl_stapling_verify on;
        resolver 8.8.8.8 8.8.4.4 valid=300s;
        resolver_timeout 5s;
#server_name awx.myawesomedomain.com;
access_log /var/log/nginx/awx.access.log;
error_log /var/log/nginx/awx.error.log;

location / {
proxy_http_version 1.1;
proxy_set_header Host $host;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header X-Forwarded-Proto $scheme;
proxy_set_header Upgrade $http_upgrade;
proxy_set_header Connection "upgrade";

 

#  location / {
    proxy_redirect off;
#    proxy_set_header Host $host;
#    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  
    # Nginx doesn't support nested If statements, so we
    # concatenate compound conditions on the $cors variable
    # and process later

    # If request comes from allowed subdomain
    # (*.myawesomedomain.com) then we enable CORS
    if ($http_origin ~* (https?://.*\.myawesomedomain\.com(:[0-9]+)?$)) {
       set $cors "1";
    }
  
    # OPTIONS indicates a CORS pre-flight request
    if ($request_method = 'OPTIONS') {
       set $cors "${cors}o";
    }
  
    # Append CORS headers to any request from 
    # allowed CORS domain, except OPTIONS
    if ($cors = "1") {
       more_set_headers 'Access-Control-Allow-Origin: $http_origin';
       more_set_headers 'Access-Control-Allow-Credentials: true';
       proxy_pass      http://localhost:8000;
    }
  
    # OPTIONS (pre-flight) request from allowed 
    # CORS domain. return response directly
    if ($cors = "1o") {
       more_set_headers 'Access-Control-Allow-Origin: $http_origin';
       more_set_headers 'Access-Control-Allow-Methods: GET, POST, OPTIONS, PUT, DELETE';
       more_set_headers 'Access-Control-Allow-Credentials: true';
       more_set_headers 'Access-Control-Allow-Headers: Origin,Content-Type,Accept';
       add_header Content-Length 0;
       add_header Content-Type text/plain;
       return 204;
    }
  
    # Requests from non-allowed CORS domains
       proxy_pass      http://localhost:8000;

    # Set a timeout for the session
       ssl_session_timeout 5m;

   }
}
